# import required library
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error
import pickle
#import the dataset
dataset = pd.read_csv(r"C:\Users\HP\OneDrive\Documents\SENAPATI SIR FSDS NOTE\SEPTMBER MONTH DS NOTE\24th - slr with streamlit\24th - slr with streamlit\Salary_Data.csv")

#split the data into independent variable
x = dataset.iloc[:,:-1].values
# split the dataset into dependent variable
y = dataset.iloc[:,1].values
# as DV is continus that regression algorithm 
# in the dataset we have two attribute we slr algo
# as in the dataset to 80% - 20%

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.20,random_state=0)

# we called simple linear regression algoriytm from sklearn framework
regression = LinearRegression()
# we build simple linear regression model regressor
regression.fit(x_train,y_train)
#test the model and create a predicted table
y_pred = regression.predict(x_test)

# visualize the train data point (24 data)
plt.scatter(x_train,y_train,color = 'red')
plt.plot(x_train,regression.predict(x_train),color = 'blue')
plt.title('Salary vs Exprience(Training set)')
plt.xlabel('years of Exprience')
plt.ylabel('Salary')
plt.show()

# visualize the test data point (6 data)
plt.scatter(x_test,y_test,color = 'red')
plt.plot(x_train,regression.predict(x_train),color = 'blue')
plt.title('Salary vs Exprience (Testing set)')
plt.xlabel('Years of Exprience')
plt.ylabel('Salary')
plt.show()

# slope is generated from linear regress algorithm which fitto dataset
m = regression.coef_
print(m)

# intercept also generated by model
c = regression.intercept_
print(c)

# predict or forcast the future the data which we not trained before 
y_12 = 9312 * 12 + 26780
print(y_12)
y_20 = 9312 * 20 + 26780
print(y_20)


# to check the overfitting (low bias high variance)
# to check the underfitting (high bias low variaance)
#deploiment in flask and html
# mlops (azure, googlcolab,kubernet,heroku)

# to check the model perfermences
bias = regression.score(x_train,y_train)
variance = regression.score(x_test,y_test)
train_mse = mean_squared_error(y_train,regression.predict(x_train))
test_mse = mean_squared_error(y_test,y_pred)

print(f'Training Score (R^2):{bias:.2f}')
print(f'Testing Score (R^2):{variance:.2f}')
print(f'Training MSE : {train_mse:.2f}')
print(f'Testing MSE : {test_mse:.2f}')



# save the trained model to disk
filename = 'linear_regression_model.pkl'

# open a file in write-binary mode and dump the model
with open(filename,'wb')as file:
    pickle.dump(regression,file)

print('Model has been pickled and saved as linear_regression_model.pkl')






